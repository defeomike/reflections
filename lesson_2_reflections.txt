What happens when you initialize a repository? Why do you need to do it?

    Initializing the repository adds the .git file and gets the directory ready
    for version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is where you can specify which files will be a part of the
    next commit. It is useful in situations where you'd like to break a commit
    up into multiple pieces.

How can you use the staging area to make sure you have one commit per logical
change?

    You can be sure to add just the files to the staging area that you'd like
    to add to the logically divided commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches are useful any time you want to work on a potential alternate
    version of the project that you've been working on.

How do the diagrams help you visualize the branch structure?

    They help to understand what will show up in a git log command, what each
    branch is built off of, and what happens when checking out a particular
    commit.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    All of the changes made in the two branches on the parent will be reflected
    in the merged branch. The diagram is shown the way it is because all of the
    history is still contained int he merged branch and is accessible from
    git log.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Automatic merging saves a ton of time vs. manual merging, but it is a less
    transparent operation than doing the merge manually, and could lead to
    some unknown consequences.